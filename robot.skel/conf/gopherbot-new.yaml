## This is an example gopherbot.yaml that cat be used to further customize
## your robot beyond the contents of the '.env' file. The contents of this
## file override / augment the contents of conf/gopherbot.yaml in the
## distribution, and you should examine that file's contents as well.
## NOTE: dictionaries are merged, arrays are appended.

## List of users that can issue admin commands like reload, quit. Should be
## a list of user handles / nicks. Added to value(s) from GOPHER_ADMIN.
AdminUsers: [ "<GOPHER_ADMIN_USER>" ]

## Provided by 'info'
#AdminContact: "Your Name, <you@your.dom>"

## Channels where plugins will be available by default if none explicitly
## configured for a plugin.
DefaultChannels: [ "general", "random" ]

## This can also be specified with GOPHER_ALIAS in '.env', or in
## 'gopherbot.env' in the root of the custom configuration repository.
Alias: "<GOPHER_ALIAS>"

Brain: file
BrainConfig:
  BrainDirectory: private/brain

## Command pluggins, protocol connectors and brain providers can
## be loaded as modules at runtime.
# LoadableModules:
#   "knock":
#     Description: Knock knock jokes!
#     Path: goplugins/knock.so
#   "meme":
#     Description: Image memes using imgflip API
#     Path: goplugins/meme.so
#   "dynamo":
#     Description: Brain using AWS DynamoDB for the key-value store
#     Path: brains/dynamodb.so

## List of users that the robot won't even 'hear'. Note that if you put other
## robot / webhook IDs in the UserRoster with 'TriggersOnly: true', you can
## safely allow robots to 'talk' to each other, and trigger a job by another
## robot.
#IgnoreUsers: [ "floyd", "bender" ]

## If a job doesn't specify otherwise, this is the channel where it runs.
#DefaultJobChannel: clu-jobs

## Example scheduled job
## Timezone for scheduled jobs
#TimeZone: "America/New_York"
## Job scheduling with github.com/robfig/cron
#ScheduledTasks:
#- Name: hello
#  Schedule: "@every 30s" # see: https://godoc.org/github.com/robfig/cron
#  Arguments: # an array of strings; up to the job to parse numbers & bools
#  - "Hello, World !!!"

## An example of configuring an external plugin script.
#ExternalPlugins:
#  "echo":
#    Description: Trivial bash plugin
#    Path: plugins/samples/echo.sh

## Example configuration for an external job script.
#ExternalJobs:
#  "hello":
#    Description: Trivial hello world job for testing
#    Path: jobs/hello.sh
#    Parameters:
#    - Name: NONCE
#      Value: "No way, Jack!"

## See the documentation on configuration for an explanation of message format.
#DefaultMessageFormat: Raw

## Initial log level, one of trace, debug, info, warn, error. See 'help log'
## for help on changing the log level and viewing contents of the log.
## The default of "debug" is quite verbose, "info" is recommended.

#LogLevel: info

## If your history logs are in a directory being served by a webserver,
## put the URLPrefix here.

#HistoryConfig:
#  URLPrefix: 'http://localhost:9000'

## Optional; all you really need can be put in GOPHER_BOTNAME,
## GOPHER_BOTFULLNAME, and GOPHER_BOT_EMAIL environment variables.

BotInfo:
  UserName: "<GOPHER_BOTNAME>"
#  Email: clu@linuxjedi.org
#  FullName: Clu Gopherbot
#  FirstName: Clu
#  LastName: Gopherbot

## By default, if a user isn't listed in the UserRoster, the robot won't
## try matches for ambient messages not specifically directed to the robot,
## and those users could be deprived of the Chuck Norris plugin. That aside,
## Slack has anounced that it will no longer provide a consistent username
## in the future, and the UserRoster will be required for a persistent
## mapping from Slack internal IDs (provided by 'whoami') to usernames.

# Slack will eventually stop sending a username in messages, so we need
# to map usernames to user ID's here, for consistency and ease of use
# for e.g. group membership.
UserRoster:
- UserName: "<GOPHER_ADMIN_USER>"
  UserID: "<GOPHER_ADMIN_ID>"
## Floyd is the production robot that builds gopherbot,
## thus 'BotUser: true'
#- UserName: floyd
#  UserID: U138KTVCL
#  BotUser: true
#- UserName: parsley
#  UserID: U0JLW8EMS

## Example configuration for sending out email via Gmail; also see the
## comments in the distributed conf/gopherbot.yaml. Note that sending email
## will fail if BotInfo:Email: isn't set.

#MailConfig:
#  Mailhost: smtp.gmail.com:587
#  Authtype: plain
#  User: clu@linuxjedi.org
## DM the robot with 'encrypt <password>' to get the encrypted string.
#  Password: {{ decrypt "<encryptedEmailPassword>" }}

## An Elevator is used to require additional assurance before running
## certain commands, such as requiring Duo two-factor.
#DefaultElevator: duo
